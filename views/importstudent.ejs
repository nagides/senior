<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>List of Course</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="../assets/css/navbar.css">
    <link rel="stylesheet" href="../assets/css/page-layout.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Titillium+Web:ital@1&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../assets/css/bootstrap.min.css">
    <link rel="stylesheet" href="../assets/css/listcourses.css">
    <script src="../assets/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="https://unpkg.com/xlsx@0.15.1/dist/xlsx.full.min.js"></script>
</head>

<body>
    <div class="flex-row">
        <div class="nav">
            <div class="sidebar">
                <img src="/assets/images/สัญลักษณ์ประจำมหาวิทยาลัยแม่ฟ้าหลวง.png" width="50,70">
                <p class="text-center" style="color: #A60303;">MFU</p>
                <hr>
                <li class="mt-5"> <a href="/dashboardadmin"><i class="bi bi-bar-chart"></i></a> </li>
                <li class="mt-5"><a href="/listadmin"><i class="bi bi-map"></i></a></li>
                <li class="mt-5"><a href="/importstudent"><i class="bi bi-person-plus-fill"></i></a></li>
                <li class="mt-5"><a href="/commuadmin"><i class="bi bi-chat"></i></a></li>
                <li class="logout"><a href="/home"><i class="bi bi-box-arrow-right"></i></a></li>
            </div>
        </div>
    </div>

    <div class="col">
        <h1 class="head text-left" style="color: #A60303;">Import Students</h1>
        <hr class="list">
        <form class="b">
            <label for="fileUpload" class="form-label"><strong>Select an Excel File:</strong></label>
            <input type="file" id="fileUpload" class="form-control" accept=".xls, .xlsx" />
        </form>
        <button class="btn btn-primary" id="uploadButton">Upload</button>
        <div id="uploadStatus" class="mt-4"></div>
    </div>

    <div id="uploadedData" class="container-fluid mt-5"></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Retrieve data from localStorage and display if available
            const storedData = localStorage.getItem('uploadedData');
            if (storedData) {
                // Parse the stored data and display it
                console.log("Stored Data:", storedData); // Debugging: Check stored data
                displayTable(JSON.parse(storedData));
            }
        });

        document.getElementById('uploadButton').addEventListener('click', () => {
            const fileInput = document.getElementById('fileUpload');
            const file = fileInput.files[0];

            if (!file) {
                Swal.fire({
                    icon: 'warning',
                    title: 'No File Selected',
                    text: 'Please choose a file before clicking upload.',
                });
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            fetch('/api/import', {
                method: 'POST',
                body: formData,
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.message || 'Failed to upload the file.');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('API Response:', data); // Log API response for debugging

                Swal.fire({
                    icon: 'success',
                    title: 'Upload Successful',
                    text: data.message || 'File uploaded successfully.',
                });

                // Check if the response contains data
                if (data.data && data.data.length > 0) {
                    // Store data in localStorage for persistence
                    localStorage.setItem('uploadedData', JSON.stringify(data.data));
                    displayTable(data.data);
                } else {
                    document.getElementById('uploadedData').innerHTML = ` 
                        <div class="alert alert-warning">No data available to display.</div> 
                    `;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Upload Failed',
                    text: error.message,
                });
                document.getElementById('uploadStatus').innerHTML = ` 
                    <div class="alert alert-danger">Error: ${error.message}</div>`;
            });
        });

        // Function to delete a record
// Function to delete a record
function deleteRecord(email, courseCode) {
    Swal.fire({
        icon: "warning",
        title: "Warning",
        text: "Are you sure you want to delete this student?",
        showCancelButton: true,
        confirmButtonText: 'Yes'
    }).then(result => {
        if (result.isConfirmed) {
            // Call the API to delete the student
            fetch(`/api/deleteData`, {
                method: 'DELETE',
                headers: { 
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, courseCode }) // Include necessary data
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to delete student');
                }
                return response.json();
            })
            .then(() => {
                Swal.fire("Deleted!", "The student has been deleted.", "success");

                // Remove the deleted record from localStorage
                let storedData = JSON.parse(localStorage.getItem('uploadedData')) || [];
                storedData = storedData.filter(row => row.email !== email || row.courseCode !== courseCode);

                // Update localStorage with the new data
                localStorage.setItem('uploadedData', JSON.stringify(storedData));

                // Update the displayed table
                displayTable(storedData);
            })
            .catch(error => {
                Swal.fire("Error", `Failed to delete student: ${error.message}`, "error");
            });
        }
    });
}

// Function to display the table with delete buttons
function displayTable(data) {
    let table_output = '<table class="table table-striped table-bordered"><thead><tr>';

    const headers = ["Email", "Course Code", "Action"];
    headers.forEach(header => table_output += `<th>${header}</th>`);
    table_output += '</tr></thead><tbody>';

    // Loop through data and generate rows
    data.forEach(row => {
        table_output += '<tr>';
        table_output += `<td>${row.email || 'N/A'}</td>`;
        table_output += `<td>${row.courseCode || 'N/A'}</td>`;
        table_output += `<td><a class="btn btn-danger" onclick="deleteRecord('${row.email}', '${row.courseCode}')">Delete</a></td>`;
        table_output += '</tr>';
    });

    table_output += '</tbody></table>';
    document.getElementById('uploadedData').innerHTML = table_output;
}

// Ensure that the table is displayed on page load if data exists in localStorage
document.addEventListener('DOMContentLoaded', () => {
    const storedData = localStorage.getItem('uploadedData');
    if (storedData) {
        displayTable(JSON.parse(storedData));
    }
});

    </script>

</body>
</html>
